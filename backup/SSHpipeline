package main

import (
	"bytes"
	"fmt"
	"io"
	"log"
	"strings"
	"sync"

	"github.com/honops/playground/conn"
	"golang.org/x/crypto/ssh"
)

type singleWriter struct {
	b  bytes.Buffer
	mu sync.Mutex
}

func (w *singleWriter) Write(p []byte) (int, error) {
	w.mu.Lock()
	defer w.mu.Unlock()
	return w.b.Write(p)
}

func main() {
	client, err := conn.NewSSHClient("xxx.xxx.xxx.xxx", "root", "")
	if err != nil {
		panic(err)
	}
	ss, err := client.NewSession()
	if err != nil {
		panic(err)
	}
	defer ss.Close()
	////////////////////
	modes := ssh.TerminalModes{
		ssh.ECHO:          1,     // disable echoing
		ssh.TTY_OP_ISPEED: 14400, // input speed = 14.4kbaud
		ssh.TTY_OP_OSPEED: 14400, // output speed = 14.4kbaud
	}

	if err := ss.RequestPty("vt100", 80, 40, modes); err != nil {
		panic(err)
	}

	w, err := ss.StdinPipe()
	if err != nil {
		panic(err)
	}
	r, err := ss.StdoutPipe()
	if err != nil {
		panic(err)
	}
	e, err := ss.StderrPipe()
	if err != nil {
		panic(err)
	}

	in, out := MuxShell(w, r, e)
	if err := ss.Shell(); err != nil {
		log.Fatal(err)
	}
	<-out //ignore the shell output
	in <- "sleep 2"

	fmt.Println(<-out)

}

func MuxShell(w io.Writer, r, e io.Reader) (chan<- string, <-chan string) {
	in := make(chan string, 3)
	out := make(chan string, 5)
	var wg sync.WaitGroup
	wg.Add(1) //for the shell itself
	go func() {
		for cmd := range in {
			wg.Add(1)
			w.Write([]byte(cmd + "\n"))
			wg.Wait()
		}
	}()

	go func() {
		var (
			buf [65 * 1024]byte
			t   int
		)
		for {
			n, err := r.Read(buf[t:])
			if err != nil {
				fmt.Println(err.Error())
				close(in)
				close(out)
				return
			}
			t += n
			result := string(buf[:t])
			if strings.Contains(result, "Username:") ||
				strings.Contains(result, "Password:") ||
				strings.Contains(result, "#") {
				out <- string(buf[:t])
				t = 0
				wg.Done()
			}
		}
	}()
	return in, out
}
